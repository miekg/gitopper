.\" Generated by Mmark Markdown Processer - mmark.miek.nl
.TH "GITOPPERCTL" 8 "March 2023" "System Administration" "Git Operations"

.SH "GITOPPERCTL"
.SH "NAME"
.PP
gitopperctl - interact remotely with gitopper

.SH "SYNOPSIS"
.PP
\fB\fCgitopperctl [OPTION]...\fR \fIcommands\fP \fI@host\fP

.SH "DESCRIPTION"
.PP
Gitopperctl is an utility to inspect and control gitopper remotely. The command line syntax follow other *-ctl tools a
bit.

.PP
There are only a few options:

.TP
\fB-i value\fP
identity file to use for SSH, this flag is mandatory
.TP
\fB-m\fP
machine readable output (default: false), output JSON
.TP
\fB--help, -h\fP
show help


.PP
The two main branches of use are \fB\fClist\fR and \fB\fCdo\fR \fBcommands\fP. Note the \fB\fC-i <sshkey>\fR argument is
only shown once in these examples:

.PP
.RS

.nf
\&./gitopperctl \-i ~/.ssh/id\_ed25519\_gitopper list machine @<host>
\&./gitopperctl list service @<host>
\&./gitopperctl list service  @<host> <service>

.fi
.RE

.PP
In order:

.IP 1\. 4
List all machines defined in the config file for gitopper running on \fB\fC<host>\fR.
.IP 2\. 4
List all services that are controlled on \fB\fC<host>\fR.
.IP 3\. 4
List a specific service on \fB\fC<host>\fR.


.PP
Each will output a simple table with the information:

.PP
.RS

.nf
\&./gitopperctl list service @localhost grafana\-server
SERVICE         HASH      STATE  INFO  SINCE
grafana\-server  606eb576  OK           2022\-11\-18 13:29:44.824004812 +0000 UTC

.fi
.RE

.PP
Use \fB\fC--help\fR to show implemented subcommands.

.SS "MANIPULATING SERVICES"
.PP
Freezing (make it stop updating to the latest commit), until a unfreeze:

.PP
.RS

.nf
\&./gitopperctl do freeze   @<host> <service>
\&./gitopperctl do unfreeze @<host> <service>

.fi
.RE

.PP
Rolling back to a previous commit, hash needs to be a valid hexadecimal value (meaning it must be of
even length):

.PP
.RS

.nf
\&./gitopperctl do rollback @<host> <service> <hash>

.fi
.RE

.PP
And this can be abbreviated to:

.PP
.RS

.nf
\&./gitopperctl d r @<host> <service> <hash>

.fi
.RE

.PP
Or make it to pull now and now wait for the default wait duration to expire:

.PP
.RS

.nf
\&./gitopper do pull @<host> <service>

.fi
.RE

.SH "EXAMPLE"
.PP
This is a small example of this tool interacting with the daemon.

.IP \(bu 4
check current service


.PP
.RS

.nf
\&./gitopperctl list service @localhost grafana\-server
SERVICE         HASH      STATE  INFO  SINCE
grafana\-server  606eb576  OK           0001\-01\-01 00:00:00 +0000 UTC

.fi
.RE

.IP \(bu 4
rollback


.PP
.RS

.nf
\&./gitopperctl do rollback @localhost grafana\-server 8df1b3db679253ba501d594de285cc3e9ed308ed

.fi
.RE

.IP \(bu 4
check


.PP
.RS

.nf
\&./gitopperctl list service @localhost grafana\-server
SERVICE         HASH      STATE     INFO                                      SINCE
grafana\-server  606eb576  ROLLBACK  8df1b3db679253ba501d594de285cc3e9ed308ed  2022\-11\-18 13:28:42.619731556 +0000 UTC

.fi
.RE

.IP \(bu 4
check do, rollback done. Now state is FREEZE


.PP
.RS

.nf
\&./gitopperctl list service @localhost grafana\-server
SERVICE         HASH      STATE   INFO                                                      SINCE
grafana\-server  8df1b3db  FREEZE  ROLLBACK: 8df1b3db679253ba501d594de285cc3e9ed308ed  2022\-11\-18 13:29:17.92401403 +0000 UTC

.fi
.RE

.IP \(bu 4
unfreeze and let it pick up changes again


.PP
.RS

.nf
\&./gitopperctl do unfreeze @localhost grafana\-server

.fi
.RE

.IP \(bu 4
check the service


.PP
.RS

.nf
\&./gitopperctl list service @localhost grafana\-server
SERVICE         HASH      STATE  INFO  SINCE
grafana\-server  8df1b3db  OK           2022\-11\-18 13:29:44.824004812 +0000 UTC

.fi
.RE

.IP \(bu 4
and updated to new hash


.PP
.RS

.nf
\&./gitopperctl list service @localhost grafana\-server
SERVICE         HASH      STATE  INFO  SINCE
grafana\-server  606eb576  OK           2022\-11\-18 13:29:44.824004812 +0000 UTC

.fi
.RE

